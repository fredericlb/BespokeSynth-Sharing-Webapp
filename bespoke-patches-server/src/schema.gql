# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type PatchOutput {
  uuid: String!
  type: PatchType!
  title: String!
  author: String!
  appVersion: String!
  tags: [String!]!
  bsFile: String!
  coverImage: String
  audioSamples: [String!]!
  summary: String!
  description: String
  status: PatchStatus!
  revision: Int!
  publicationDate: DateTime!
  content: String!
}

enum PatchType {
  PATCH
  PREFAB
}

enum PatchStatus {
  WAITING_FOR_APPROVAL
  APPROVED
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ActionTokenOutput {
  uuid: String!
  enabled: Boolean!
  expirationDate: DateTime!
}

type Query {
  tags: [String!]!

  """Retrieves a full patch"""
  patch(
    token: String

    """Patch identifier"""
    uuid: String!
  ): PatchOutput!

  """List patches (brief format) based on search input and tags"""
  patches(limit: Int = 20, offset: Int = 0, search: String = null, tags: [String!] = []): [PatchOutput!]!

  """Check if an action token has been activated through its uuid"""
  checkActionToken(uuid: String!): ActionTokenOutput!
}

type Mutation {
  """Approve (make it visible) or revoke (delete) a patch """
  moderatePatch(approved: Boolean!, token: String, uuid: String!): Boolean!

  """
  Upload patch/prefab (type based on file extension) after getting an action token
  """
  uploadPatch(files: [Upload!]!, tokenUuid: String!, uploadInfo: UploadPatchInput!): String!

  """Create a new action token and send validation mail"""
  createActionToken(mail: String!): ActionTokenOutput!

  """Enables an action token"""
  enableToken(token: String!, uuid: String!): ActionTokenOutput!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UploadPatchInput {
  title: String!
  version: String!
  author: String!
  mail: String!
  tags: [String!]!
  summary: String!
  description: String
}
